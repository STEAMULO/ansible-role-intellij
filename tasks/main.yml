---
- name: Install needed dependancies
  action: "{{ ansible_pkg_mgr }} state=present name={{ item }}"
  with_items:
    - tar

- name: Check for existing version
  stat: path={{intellij_install_dir}}/idea/version.{{ intellij_version }}.lock
  register: version_lock_stat

- name: Download intellij
  get_url: url={{intellij_url}} dest={{intellij_tmp}}
  when: not version_lock_stat.stat.exists

- name: Ensure installation directory
  file:
    state=directory
    mode=0755
    dest={{intellij_install_dir}}
  when: not version_lock_stat.stat.exists

- name: Unarchive intellij
  unarchive:
    copy=no
    src={{intellij_tmp}}
    dest={{intellij_install_dir}}
  when: not version_lock_stat.stat.exists

- name: Retrieve intellij dir name
  command: ls -t {{intellij_install_dir}}
  register: result_intellij_folder_name
  when: not version_lock_stat.stat.exists

- name: Create symlink from
  file: dest={{intellij_install_dir}}/idea src={{intellij_install_dir}}/{{intellij_folder_name}} state=link
  when: not version_lock_stat.stat.exists

- name: Ensure intellij bin exist
  template: src=intellij.j2 dest=/usr/bin/intellij mode=755
  when: not version_lock_stat.stat.exists

- name: Set version lock
  copy:
    dest: "{{intellij_install_dir}}/{{intellij_folder_name}}/version.{{ intellij_version }}.lock"
    content: "This file is a version lock for the intellij Ansible role."
  when: not version_lock_stat.stat.exists

- name: Collect versions to be removed
  shell: "ls -1 {{ intellij_install_dir }} | egrep -v \"{{ intellij_folder_name }}|idea$\" || true"
  register: toberemoved
  when: not version_lock_stat.stat.exists

- name: remove old versions
  file: path={{intellij_install_dir}}/{{ item }} state=absent
  with_items: '{{toberemoved.stdout_lines|default([])}}'
  when: toberemoved is defined